{"version":3,"sources":["constants.ts","operatorHandlers.ts","app.ts"],"names":[],"mappings":"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","file":"app.60eeab0e.js","sourceRoot":"..\\src","sourcesContent":["import { IActions } from './types/index';\r\n\r\nexport const actions: IActions = {\r\n  ADD: 'add',\r\n  SUBTRACT: 'subtract',\r\n  MULTIPLY: 'multiply',\r\n  DIVIDE: 'divide',\r\n  DECIMAL: 'decimal',\r\n  PERCENTAGE: 'percentage',\r\n  EQUALS: 'equals',\r\n  CLEAR: 'clear'\r\n};\r\n","import { calculator } from './app';\r\nimport { actions } from './constants';\r\n\r\nfunction decimal(currentOutput) {\r\n  if (currentOutput.includes('.')) {\r\n    return;\r\n  }\r\n  if (calculator.getState.previousButtonType === 'operator') {\r\n    calculator.output = currentOutput + '.';\r\n    return;\r\n  }\r\n  calculator.output = currentOutput + '.';\r\n}\r\n\r\nfunction clear() {\r\n  calculator.output = '0';\r\n  calculator.setState = { firstValue: null };\r\n  calculator.setState = { operator: null };\r\n  calculator.setState = { secondValue: null };\r\n  calculator.setState = { previousButtonType: null };\r\n}\r\n\r\nfunction add() {\r\n  calculator.setState = { operator: actions.ADD };\r\n}\r\n\r\nfunction subtract() {\r\n  calculator.setState = { operator: actions.SUBTRACT };\r\n}\r\n\r\nfunction multiply() {\r\n  calculator.setState = { operator: actions.MULTIPLY };\r\n}\r\n\r\nfunction divide() {\r\n  calculator.setState = { operator: actions.DIVIDE };\r\n}\r\n\r\nfunction percentage(input: string): number {\r\n  return parseFloat(input) / 100;\r\n}\r\n\r\nfunction calculate({ firstVal, operator, secondVal }): number {\r\n  switch (operator) {\r\n    case actions.ADD:\r\n      return parseFloat(firstVal) + parseFloat(secondVal);\r\n    case actions.SUBTRACT:\r\n      return parseFloat(firstVal) - parseFloat(secondVal);\r\n    case actions.MULTIPLY:\r\n      return parseFloat(firstVal) * parseFloat(secondVal);\r\n    case actions.DIVIDE:\r\n      return parseFloat(firstVal) / parseFloat(secondVal);\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n\r\nfunction equals(firstVal, operator, secondVal) {\r\n  const result = calculate({ firstVal, operator, secondVal });\r\n  calculator.output = result.toString();\r\n  calculator.setState = { firstValue: null };\r\n  calculator.setState = { operator: null };\r\n  calculator.setState = { secondValue: null };\r\n  calculator.setState = { previousButtonType: null };\r\n}\r\nexport default {\r\n  decimal,\r\n  clear,\r\n  equals,\r\n  add,\r\n  subtract,\r\n  divide,\r\n  multiply,\r\n  percentage,\r\n  calculate\r\n};\r\n","import { IState, IStateUpdate, IActions } from './types';\r\nimport { actions } from './constants';\r\nimport operatorHandlers from './operatorHandlers';\r\n\r\nclass Calculator {\r\n  constructor() {\r\n    this.buttons.addEventListener('click', e => this.buttonHandler(e));\r\n  }\r\n\r\n  private state: IState = {\r\n    previousButtonType: null,\r\n    firstValue: null,\r\n    secondValue: null,\r\n    operator: null\r\n  };\r\n\r\n  private buttonElements = document.querySelector('.calculator__buttons');\r\n\r\n  private display: HTMLElement = document.querySelector('.calculator__output');\r\n\r\n  private clearButton = document.querySelector('[data-action=\"clear\"]');\r\n\r\n  get currentOutput() {\r\n    return this.display.textContent;\r\n  }\r\n\r\n  set output(input: string) {\r\n    this.display.textContent = input;\r\n  }\r\n\r\n  get buttons() {\r\n    return this.buttonElements;\r\n  }\r\n\r\n  get getState() {\r\n    return this.state;\r\n  }\r\n  set setState(newState: IStateUpdate) {\r\n    this.state = Object.assign(this.state, newState);\r\n  }\r\n\r\n  set firstValue(value: string) {\r\n    this.setState = { firstValue: value };\r\n  }\r\n\r\n  set secondValue(value: string) {\r\n    this.setState = { secondValue: value };\r\n  }\r\n\r\n  handleNumber = (currentOutput, buttonValue) => {\r\n    if (hasDecimal(currentOutput) && calculator.getState.operator === null) {\r\n      calculator.output = currentOutput + buttonValue;\r\n      return this;\r\n    }\r\n\r\n    if (isStartOfFirstValue(currentOutput)) {\r\n      calculator.output = buttonValue;\r\n      calculator.firstValue = buttonValue;\r\n      return this;\r\n    }\r\n\r\n    if (isFirstValue()) {\r\n      calculator.output = calculator.currentOutput + buttonValue;\r\n      calculator.firstValue = calculator.currentOutput + buttonValue;\r\n      return this;\r\n    }\r\n\r\n    // Set second value\r\n    if (isSecondValue()) {\r\n      calculator.secondValue = currentOutput;\r\n      calculator.output = buttonValue;\r\n    } else {\r\n      calculator.output = calculator.currentOutput + buttonValue;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  toggleClearMode = (action: string): void => {\r\n    if (action === actions.CLEAR) {\r\n      this.clearButton.textContent = 'AC';\r\n    } else {\r\n      this.clearButton.textContent = 'CE';\r\n    }\r\n  };\r\n\r\n  handleOperator = (action: string) => {\r\n    return operatorHandlers[action](this.currentOutput);\r\n  };\r\n\r\n  buttonHandler = e => {\r\n    const button: HTMLElement = e.target;\r\n    if (button.matches('.calculator__button')) {\r\n      const { action } = button.dataset;\r\n      const buttonValue: string = button.textContent.trim();\r\n\r\n      // Toggle clear button text\r\n      this.toggleClearMode(action);\r\n\r\n      if (!action) {\r\n        // Is number key\r\n        return this.handleNumber(this.currentOutput, buttonValue);\r\n      }\r\n      // is action key\r\n      if (isAction(actions, action)) {\r\n        this.setState = { previousButtonType: 'operator' };\r\n        if (action === actions.EQUALS) {\r\n          return operatorHandlers.equals(\r\n            this.getState.firstValue,\r\n            this.getState.operator,\r\n            this.currentOutput\r\n          );\r\n        }\r\n        if (action === actions.PERCENTAGE) {\r\n          this.output = operatorHandlers\r\n            .percentage(this.currentOutput)\r\n            .toString();\r\n          return;\r\n        }\r\n        calculator.firstValue = this.currentOutput;\r\n\r\n        return this.handleOperator(action);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport function hasDecimal(str: string): boolean {\r\n  const regex = /\\./g;\r\n  return regex.test(str);\r\n}\r\n\r\nfunction isFirstValue(): boolean {\r\n  return calculator.getState.firstValue === null;\r\n}\r\n\r\nfunction isStartOfFirstValue(currentOutput: string): boolean {\r\n  return isFirstValue() || currentOutput === '0';\r\n}\r\n\r\nfunction isSecondValue(): boolean {\r\n  return (\r\n    calculator.getState.firstValue &&\r\n    calculator.getState.previousButtonType === 'operator' &&\r\n    calculator.getState.secondValue === null\r\n  );\r\n}\r\n\r\nfunction isAction(actions: IActions, action: string): boolean {\r\n  return !action || Object.keys(actions).includes(action.toUpperCase());\r\n}\r\n\r\nexport const calculator = new Calculator();\r\n"]}