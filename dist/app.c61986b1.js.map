{"version":3,"sources":["constants.ts","operatorHandlers.ts","app.ts"],"names":[],"mappings":";;;AAEa,OAAA,CAAA,OAAA,GAAoB;AAC/B,ACHF,EDGE,ECHF,CDGK,EAAE,ECHP,GDEiC,ACFjC,OAAA,CAAA,OAAA,CAAA;ADIE,EAAA,QAAQ,EAAE,UAFqB;AAG/B,ACJF,EDIE,ECJF,MDIU,EAAE,GCJZ,GAAA,IDCiC,GCDjC,CAAA,aAAA,CAAA;ADKE,EAAA,MAAM,EAAE,QAJuB;AAK/B,ACJF,EDIE,OAAO,ACJA,EDIE,KCJX,CAAiB,GDDgB,UCCjC,EAA8B;ADK5B,ACJA,EDIA,ACJA,OAAO,CAAC,EDIE,CCJV,CDIY,ACJA,YDFmB,CCE/B;ACHF,AFQE,EAAA,EERF,IFQQ,EAAE,KERV,GAAA,AFCiC,OEDjC,CAAA,aAAA,CAAA;AFSE,ACLA,EDKA,ICLI,CDKC,EAAE,UCLU,CAAC,QAAd,CAAuB,GAAvB,CAAJ,EAAiC;ACHnC,AFAiC,ACI7B,CDJS,GEAb,kBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;ADKG;ACHH,IAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,aAAvB,CAAnB;AACA,ADGE,ICHI,EDGA,KCHO,ADGP,CAAA,ECHU,GDGV,CAAM,MCHc,CAAC,WDGrB,ECHU,CAAyB,EDGN,UAAjC,EAA6C,QCH/B,CAAhB;AACa,ADGT,IAAA,GCHS,CAAA,CDGT,CAAA,KCHS,EDGT,CCHgC,ADGxB,QCHgC,CAAC,EDGzC,GAAsB,QCHU,CAClC,IDEqC,GAAG,GAAtC,WCHgC,CAAvB;AAGb,ADCI,ICDE,WAAW,GAAG,QAAQ,CAAC,aAAT,CAAuB,uBAAvB,CAApB;AAEa,ADAV,OCAU,CAAA,KAAA,GAAgB;AAC3B,EAAA,kBAAkB,EAAE,IADO;AAE3B,ADDA,ECCA,ADDA,KAAA,CAAA,ICCU,EAAE,CDDZ,CAAQ,ECDmB,SDC3B,GAAsB,aAAa,GAAG,GAAtC;ACEA,ADDD,ECCC,WAAW,EAAE,IAHc;AAI3B,EAAA,QAAQ,EAAE;AAJiB,ADI7B,CCJa,QDIJ,KAAT,GAAc;AACZ,EAAA,KAAA,CAAA,OAAA,CAAQ,WAAR,GAAsB,GAAtB;ACEF,ADDE,EAAA,KAAA,CAAA,CCCO,IDDP,CAAM,UAAN,GAAmB,IAAnB,CCCF,CAAiC,WAAjC,EAA4C,CAAI;ADA9C,EAAA,KAAA,CAAA,KAAA,CAAM,QAAN,GAAiB,IAAjB;ACEF,ADDE,EAAA,KAAA,CAAA,CCCO,IDDP,CAAM,KCCR,CAAoB,GAApB,EAA+B,ADD7B,GAAoB,IAApB;ACEA,ADDA,EAAA,ICCM,CDDN,CAAA,GCCW,EDDX,CCCc,ADDR,KCCN,aDDA,GAA2B,IAA3B;ACEA,ADDD,SCCQ,KAAK,CAAC,IAAN,CAAW,GAAX,CAAP;AACD;ADAD,SAAS,GAAT,GAAY;ACEZ,ADDE,EAAA,KAAA,CAAA,CCCO,IDDP,CAAM,QAAN,GAAiB,CCCnB,CAA2B,SDDR,CAAA,GCCnB,EAA0C,EDDvB,CAAQ,GAAzB,KCCF,EAAuD,kBAAvD,EAAyE;AACvE,ADDD,ECCC,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,OAAA,CAAA,KAA3B;;AACA,ADAF,MCAM,GDAG,QAAT,ECAmB,CDAF,ICAO,GAAtB,EAA2B;AACzB,ADAF,EAAA,ECAE,GDAF,CAAA,GCAE,CAAA,CDAF,CAAM,KCAJ,CAAQ,EDAV,GAAiB,MCAf,GAAsB,EDAP,CAAA,OAAA,CCAf,ADAuB,QAAzB;ACCE,ADAH,WCAU,IAAP;AACD;ADCH,SAAS,QAAT,GAAiB;ACAf,ADCA,EAAA,ICDI,CDCJ,CAAA,KAAA,CAAM,ECDQ,CAAC,KDCf,GAAiB,KCDH,CAAV,IAA6B,CDChB,CAAA,KCDgB,CAAA,CDChB,CAAQ,GCDQ,CAAM,IDCvC,ICDiC,KAAmB,IAApD,EAA0D;AACxD,ADCH,ICDG,OAAA,CAAA,OAAA,CAAQ,WAAR,GAAsB,aAAa,GAAG,WAAtC;AACA,WAAO,IAAP;AACD,ADCH,SAAS,MAAT,GAAe;AACb,EAAA,KAAA,CAAA,KAAA,CAAM,QAAN,GAAiB,WAAA,CAAA,OAAA,CAAQ,MAAzB;ACDA,ADED,MCDG,OAAA,CAAA,KAAA,CAAM,UAAN,IACA,kBAAkB,KAAK,UADvB,IAEA,OAAA,CAAA,KAAA,CAAM,WAAN,KAAsB,IAHxB,EAIE;AACA,IAAA,OAAA,CAAA,OAAA,CAAQ,WAAR,GAAsB,WAAtB;AACA,ADFJ,ICEI,KDFK,ECEL,CAAA,KAAA,CAAM,CDFV,CAAoB,KAApB,EAAiC,ECE7B,GAAoB,OAAA,CAAA,OAAA,CAAQ,WAA5B;AACD,ADFD,GCLA,MAOO,ADFA,UAAU,CAAC,KAAD,CAAV,GAAoB,GAA3B;ACGE,ADFH,ICEG,OAAA,CAAA,OAAA,CAAQ,WAAR,IAAuB,WAAvB;AACD;ADDH,SAAS,SAAT,CAAmB,EAAnB,EAAoD;ACElD,MDFmB,GCEZ,IAAP,CDFmB,GAAA,EAAA,CAAA;ACGpB,MDH8B,QAAA,GAAA,EAAA,CAAA;MAAU,SAAA,GAAA,EAAA,CAAA;ACKzC,SAAS,eAAT,CAAyB,MAAzB,EAAuC;AACrC,ADLA,MCKI,IDLI,ECKE,KAAK,CDLf,UCKe,CAAA,OAAA,CAAQ,KAAvB,EAA8B;AAC5B,ADLA,ICKA,KDLK,MCKM,CAAC,IDLP,CAAA,MCKL,CDLK,CAAQ,CCKa,EDL1B,ECKA;AACA,ADLE,aAAO,UAAU,CAAC,QAAD,CAAV,GAAuB,UAAU,CAAC,SAAD,CAAxC;ACMH,GAHD,MAGO;AACL,ADNA,ICMA,KDNK,MCMM,CAAC,IDNP,CAAA,MCML,CDNK,CAAQ,CCMa,IAA1B,GDNA;ACOD,ADNG,aAAO,UAAU,CAAC,QAAD,CAAV,GAAuB,UAAU,CAAC,SAAD,CAAxC;ACOL;ADNG,SAAK,WAAA,CAAA,OAAA,CAAQ,QAAb;ACQJ,ADPM,SCOG,IDPI,UCOb,ADPuB,CCOC,ADPA,MCOxB,EAAgC,ADPT,CAAV,GAAuB,SCOpC,CDP8C,CCOD,ADPE,SAAD,CAAxC;ACQJ,SAAO,kBAAA,CAAA,SAAA,CAAA,CAAiB,MAAjB,EAAyB,aAAzB,CAAP;AACD,ADRG,SAAK,WAAA,CAAA,OAAA,CAAQ,MAAb;AACE,aAAO,UAAU,CAAC,QAAD,CAAV,GAAuB,UAAU,CAAC,SAAD,CAAxC;ACSN,SAAS,QAAT,CAAkB,OAAlB,EAAqC,MAArC,EAAmD;AACjD,ADTE,SCSK,CAAC,MAAD,IAAW,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,CAA8B,MAAM,CAAC,WAAP,EAA9B,CAAlB;AACD,ADTK,aAAO,CAAP;AAVJ;ACqBF,ADTC,SCSQ,aAAT,CAAuB,CAAvB,EAAwB;AACtB,MAAM,MAAM,GAAgB,CAAC,CAAC,MAA9B;ADRF,SAAS,MAAT,CAAgB,QAAhB,EAA0B,QAA1B,EAAoC,SAApC,EAA6C;ACU3C,ADTA,MCSI,ADTE,MCSI,ADTE,CCSD,EDTI,KCSX,CAAe,GDTK,CAAC,iBCSrB,CAAJ,EAA2C;AACzC,ADVyB,IAAA,ICUnB,IDV2B,ECUrB,ADVqB,GCUV,KDVA,CCUM,CAAC,OAAP,CAAe,MAAtC;AACA,ADXmC,IAAA,ICW7B,IDXqC,EAAA,KCW1B,GAAW,ADXL,MCWW,CAAC,WAAP,CAAmB,IAAnB,EAA5B;AACA,ADZ6C,IAAA,ICYvC,KDZgD,EAAA,MCYnC,GAAG,OAAA,CAAA,OAAA,CAAQ,WAA9B,CAHyC,CAKzC;ADduB,GAAD,CAAxB;ACeE,ADdF,EAAA,ECcE,GDdF,CAAA,OAAA,CAAQ,GCcS,CAAC,MAAD,CAAf,ADdF,GAAsB,MAAM,CAAC,QAAP,EAAtB;AACA,EAAA,KAAA,CAAA,KAAA,CAAM,UAAN,GAAmB,IAAnB;ACeE,ADdF,EAAA,KAAA,CCcM,ADdN,CCcO,IDdP,CAAM,CCcJ,EAAa,KDdf,GAAiB,IAAjB;ACeI,ADdJ,EAAA,KAAA,CAAA,KAAA,CAAM,WAAN,GAAoB,IAApB;ACeI,ADdJ,EAAA,KAAA,CAAA,KCcW,ADdX,CAAM,gBCcsB,CACtB,CDfN,GAA2B,IAA3B,KCc4B,EAEtB,WAFsB,EAGtB,OAAA,CAAA,KAAA,CAAM,kBAHgB,CAAxB;AAKD,ADlBJ,KCG4C,CAgBzC;;ADlBJ,OAAA,CAAA,SAAA,CAAA,GAAe;ACmBX,ADlBF,EAAA,MCkBM,CDlBC,EAAA,KCkBO,CAAC,CDnBF,UCmBE,CAAA,OAAD,EAAU,MAAV,CAAZ,EAA+B;AAC7B,ADlBJ,EAAA,ICkBI,CDlBC,EAAA,ICkBD,CAAA,ADpBS,KCoBT,CAAM,kBAAN,GAA2B,UAA3B;ADjBJ,EAAA,MAAM,EAAA,MAHO;ACqBT,ADjBJ,EAAA,GAAG,EAAA,GCiBK,ADrBK,MCqBC,KAAK,WAAA,CAAA,OAAA,CAAQ,MAAvB,EAA+B;AAC7B,ADjBN,EAAA,QAAQ,EAAA,GCiBK,KDtBA,aCsBA,CAAA,SAAA,CAAA,CAAiB,MAAjB,CACL,OAAA,CAAA,KAAA,CAAM,UADD,EAEL,OAAA,CAAA,KAAA,CAAM,QAFD,EAGL,aAHK,CAAP;AAKD,ADrBL,EAAA,MAAM,EAAA,MANO;AAOb,EAAA,QAAQ,EAAA,QAPK;AC4BT,ADpBJ,EAAA,QCoBQ,EDpBE,EAAA,ECoBI,KAAK,GD5BN,QC4BM,CAAA,OAAA,CAAQ,UAAvB,EAAmC;AACjC,ADpBN,EAAA,MCoBM,GDpBG,EAAA,ECoBH,CAAA,OAAA,CAAQ,WAAR,GAAsB,kBAAA,CAAA,SAAA,CAAA,CACnB,UADmB,CACR,aADQ,EAEnB,QAFmB,EAAtB;AAGA,ADhCO,CAAf;ACiCO;;AACD,MAAA,OAAA,CAAA,KAAA,CAAM,UAAN,GAAmB,aAAnB;AAEA,aAAO,cAAc,CAAC,MAAD,EAAS,aAAT,CAArB;AACD;AACF;AACF;;AAED,OAAO,CAAC,gBAAR,CAAyB,OAAzB,EAAkC,aAAlC","file":"app.c61986b1.js","sourceRoot":"..\\src","sourcesContent":["import { IActions } from './types/index';\r\n\r\nexport const actions: IActions = {\r\n  ADD: 'add',\r\n  SUBTRACT: 'subtract',\r\n  MULTIPLY: 'multiply',\r\n  DIVIDE: 'divide',\r\n  DECIMAL: 'decimal',\r\n  PERCENTAGE: 'percentage',\r\n  EQUALS: 'equals',\r\n  CLEAR: 'clear'\r\n};\r\n","import { display, state } from './app';\r\nimport { actions } from './constants';\r\n\r\nfunction decimal(currentOutput) {\r\n  console.log(currentOutput);\r\n  if (currentOutput.includes('.')) {\r\n    return;\r\n  }\r\n  if (state.previousButtonType === 'operator') {\r\n    display.textContent = currentOutput + '.';\r\n    return;\r\n  }\r\n  display.textContent = currentOutput + '.';\r\n}\r\n\r\nfunction clear() {\r\n  display.textContent = '0';\r\n  state.firstValue = null;\r\n  state.operator = null;\r\n  state.secondValue = null;\r\n  state.previousButtonType = null;\r\n}\r\n\r\nfunction add() {\r\n  state.operator = actions.ADD;\r\n}\r\n\r\nfunction subtract() {\r\n  state.operator = actions.SUBTRACT;\r\n}\r\n\r\nfunction multiply() {\r\n  state.operator = actions.MULTIPLY;\r\n}\r\n\r\nfunction divide() {\r\n  state.operator = actions.DIVIDE;\r\n}\r\n\r\nfunction percentage(input: string): number {\r\n  return parseFloat(input) / 100;\r\n}\r\n\r\nfunction calculate({ firstVal, operator, secondVal }): number {\r\n  switch (operator) {\r\n    case actions.ADD:\r\n      return parseFloat(firstVal) + parseFloat(secondVal);\r\n    case actions.SUBTRACT:\r\n      return parseFloat(firstVal) - parseFloat(secondVal);\r\n    case actions.MULTIPLY:\r\n      return parseFloat(firstVal) * parseFloat(secondVal);\r\n    case actions.DIVIDE:\r\n      return parseFloat(firstVal) / parseFloat(secondVal);\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n\r\nfunction equals(firstVal, operator, secondVal) {\r\n  const result = calculate({ firstVal, operator, secondVal });\r\n  display.textContent = result.toString();\r\n  state.firstValue = null;\r\n  state.operator = null;\r\n  state.secondValue = null;\r\n  state.previousButtonType = null;\r\n}\r\nexport default {\r\n  decimal,\r\n  clear,\r\n  equals,\r\n  add,\r\n  subtract,\r\n  divide,\r\n  multiply,\r\n  percentage,\r\n  calculate\r\n};\r\n","import { IState, IActions } from './types';\r\nimport { actions } from './constants';\r\nimport operatorHandlers from './operatorHandlers';\r\n\r\nconst calculator = document.querySelector('.calculator');\r\nconst buttons = calculator.querySelector('.calculator__buttons');\r\nexport const display: HTMLElement = document.querySelector(\r\n  '.calculator__output'\r\n);\r\nconst clearButton = document.querySelector('[data-action=\"clear\"]');\r\n\r\nexport const state: IState = {\r\n  previousButtonType: null,\r\n  firstValue: null,\r\n  secondValue: null,\r\n  operator: null\r\n};\r\n\r\nfunction handleNumberWithDecimal(buttonValue) {}\r\n\r\nfunction hasDecimal(str: string): boolean {\r\n  const regex = /\\.+/;\r\n  return regex.test(str);\r\n}\r\n\r\nfunction handleNumberInput(currentOutput, buttonValue, previousButtonType) {\r\n  console.log(currentOutput, state);\r\n  if (currentOutput === '0') {\r\n    display.textContent = buttonValue;\r\n    return this;\r\n  }\r\n  if (hasDecimal(currentOutput) && state.operator === null) {\r\n    display.textContent = currentOutput + buttonValue;\r\n    return this;\r\n  }\r\n  if (\r\n    state.firstValue &&\r\n    previousButtonType === 'operator' &&\r\n    state.secondValue === null\r\n  ) {\r\n    display.textContent = buttonValue;\r\n    state.secondValue = display.textContent;\r\n  } else {\r\n    display.textContent += buttonValue;\r\n  }\r\n  return this;\r\n}\r\n\r\nfunction toggleClearMode(action: string): void {\r\n  if (action === actions.CLEAR) {\r\n    clearButton.textContent = 'AC';\r\n    return;\r\n  } else {\r\n    clearButton.textContent = 'CE';\r\n  }\r\n}\r\n\r\nfunction handleOperator(action, currentOutput) {\r\n  return operatorHandlers[action](currentOutput);\r\n}\r\n\r\nfunction isAction(actions: IActions, action: string): boolean {\r\n  return !action || Object.keys(actions).includes(action.toUpperCase());\r\n}\r\n\r\nfunction buttonHandler(e) {\r\n  const button: HTMLElement = e.target;\r\n\r\n  if (button.matches('.calculator__button')) {\r\n    const action: string = button.dataset.action;\r\n    const buttonValue: string = button.textContent.trim();\r\n    const currentOutput = display.textContent;\r\n\r\n    // Toggle clear button text\r\n    toggleClearMode(action);\r\n\r\n    if (!action) {\r\n      // Is number key\r\n      return handleNumberInput(\r\n        currentOutput,\r\n        buttonValue,\r\n        state.previousButtonType\r\n      );\r\n    }\r\n    // is action key\r\n    if (isAction(actions, action)) {\r\n      state.previousButtonType = 'operator';\r\n      if (action === actions.EQUALS) {\r\n        return operatorHandlers.equals(\r\n          state.firstValue,\r\n          state.operator,\r\n          currentOutput\r\n        );\r\n      }\r\n      if (action === actions.PERCENTAGE) {\r\n        display.textContent = operatorHandlers\r\n          .percentage(currentOutput)\r\n          .toString();\r\n        return;\r\n      }\r\n      state.firstValue = currentOutput;\r\n\r\n      return handleOperator(action, currentOutput);\r\n    }\r\n  }\r\n}\r\n\r\nbuttons.addEventListener('click', buttonHandler);\r\n"]}